"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateDif = DateDif;
function DateDif(date1, date2, unit) {
    //  set to date1 and date2 00:00:00 of the day.
    date1.setHours(0, 0, 0, 0);
    date2.setHours(0, 0, 0, 0);
    // use timecode to calculate the difference in years, months, days.
    const time1 = date1.getTime();
    const time2 = date2.getTime();
    const diffMonth = date2.getMonth() - date1.getMonth();
    const diffYear = date2.getFullYear() - date1.getFullYear();
    switch (unit) {
        case 'D':
            return Math.floor((time2 - time1) / (1000 * 60 * 60 * 24));
        case 'M':
            return diffYear * 12 + diffMonth;
        case 'Y':
            return diffYear;
        case 'MD':
            if (date1.getDate() > date2.getDate()) {
                let date = new Date(date2.getFullYear(), date2.getMonth() - 1, date1.getDate());
                return Math.floor((time2 - date.getTime()) / (1000 * 60 * 60 * 24));
            }
            else if (date1.getDate() < date2.getDate()) {
                let date = new Date(date2.getFullYear(), date2.getMonth(), date1.getDate());
                return Math.floor((date.getTime() - time1) / (1000 * 60 * 60 * 24));
            }
            return 0;
        case 'YM':
            return diffMonth < 0 ? diffMonth + 12 : diffMonth;
        default:
            throw new Error(`Unsupported unit: ${unit}`);
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZWRpZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRlZGlmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMEJBK0JDO0FBL0JELFNBQWdCLE9BQU8sQ0FBQyxLQUFXLEVBQUUsS0FBVyxFQUFFLElBQVk7SUFDNUQsK0NBQStDO0lBQy9DLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQixtRUFBbUU7SUFDbkUsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0QsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNiLEtBQUssR0FBRztZQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0QsS0FBSyxHQUFHO1lBQ04sT0FBTyxRQUFRLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUNuQyxLQUFLLEdBQUc7WUFDTixPQUFPLFFBQVEsQ0FBQztRQUNsQixLQUFLLElBQUk7WUFDUCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEUsQ0FBQztpQkFDSSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDNUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RSxDQUFDO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxLQUFLLElBQUk7WUFDUCxPQUFPLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNwRDtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztBQUNILENBQUM7QUFBQSxDQUFDIn0=